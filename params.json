{"name":"Lean","tagline":"Lean PHP Framework is a micro PHP framework (~40KB). Modern frameworks are powerfull but so much complicated. With Lean I can construct apps really fast, using mvc, namespaces, autoloader, routes and more.","body":"# Lean PHP Framework\r\n\r\nLean PHP Framework is a micro framework PHP (~40KB). Modern frameworks are powerfull but so much complicated,\r\nthe mostly of resources you never gonna use, some functionality sounds good but if you don't really need it's a\r\nonly waste of time.\r\nWith Lean you can construct fast e lightweight softwares, with follows resources:\r\n\r\n* Structure MVC, REST or both;\r\n* Requests;\r\n* Routes (automatic or custom);\r\n* Namespaces;\r\n* Class autoload;\r\n* PHP code hidden;\r\n* Basic template engine;\r\n* Date and Time manipulation;\r\n* Easy configuration;\r\n\r\n### Requirement\r\n\r\nPHP 5.3+\r\n\r\n### Basic structure\r\n\r\n```php\r\n-- rootdir\r\n    -- app\r\n        -- main (module)\r\n            -- controllers\r\n                -- HomeController.php\r\n            -- models\r\n            -- views\r\n                -- home\r\n                    -- index.phtml\r\n        -- Bootstrap.php\r\n        -- Routes.php\r\n    -- public_html\r\n        -- css\r\n        -- js\r\n        -- img\r\n        -- index.php\r\n        -- .htaccess\r\n    -- vendor\r\n        -- composer\r\n        -- lean\r\n        -- autoload.php\r\n```\r\n\r\nCreate into your rootdir teh follows directories:\r\n\r\n- `app`: You will write all your application php into app directory (controllers, models, views and configs), this way your application not stay exposed.\r\n\r\n- `public_html`: Into public_html directory we have only **index.php** as file .php. You can put all yours public files, like css, javascripts, images, fonts, etc.\r\n\r\n- `vendor`: Composer will create it and copy our lib to lean directory.\r\n\r\n## Getting started\r\n\r\n### Instalation\r\n\r\nInstall via [Composer](http://getcomposer.org \"Composer\")\r\n\r\n```bash\r\ncomposer require lean/lean\r\n```\r\n\r\n### Easy configuration\r\n\r\ncreate file `index.php` into **public_html** directory\r\n\r\n> Into index.php we have only one line, all of rest application php keep safe into app directory.\r\n\r\n```php\r\n<?php require_once '../app/Bootstrap.php'; ?>\r\n ```\r\n\r\ncreate file `.htaccess` into **public_html** directory to custom urls works\r\n\r\n> Don't forget enable mod_rewrite on apache\r\n\r\n```bash\r\nRewriteEngine On\r\nRewriteCond %{REQUEST_FILENAME} -s [OR]\r\nRewriteCond %{REQUEST_FILENAME} -l [OR]\r\nRewriteCond %{REQUEST_FILENAME} -d\r\nRewriteRule ^.*$ - [NC,L]\r\nRewriteRule ^.*$ index.php [NC,L]\r\n```\r\n\r\nCreate file `Bootstrap.php` into **app** directory\r\n\r\n```php\r\n<?php\r\nrequire_once '../vendor/autoload.php';\r\n\r\n/**\r\n * errors - use E_ALL only in development\r\n */\r\nerror_reporting(E_ALL);\r\n\r\n/**\r\n * include path\r\n */\r\nset_include_path(\r\n\tPATH_SEPARATOR . '..' . DIRECTORY_SEPARATOR . \r\n\tPATH_SEPARATOR . get_include_path());\r\n\r\n/** \r\n * locale e zone\r\n * Lean has some great Date and Hour classes, so keep it configured to use them\r\n */\r\ndate_default_timezone_set('America/Sao_Paulo');\r\nsetlocale(LC_ALL, 'pt_BR', 'pt_BR.iso-8859-1', 'pt_BR.utf-8', 'portuguese');\r\n\r\n/**\r\n * init lean framework\r\n */\r\nLean\\Launch::instance()->run();\r\n```\r\n\r\nWell done! It's all configuration necessary to run like a pro.\r\n\r\n\r\n### Hello world\r\n\r\nRegardless of whether their application is rest or not, I think is a good ideia keep your access logic always into controllers,\r\ninto Routes.php you keep only routes ;)\r\n\r\n```php\r\n<?php\r\nnamespace app\\main\\controllers;\r\n\r\nclass IndexController extends \\Lean\\App\r\n{\r\n\tpublic function index() {\r\n\t\techo 'Hello World!';\r\n\t}\r\n}\r\n```\r\n\r\nIt's work, access in your browser\r\nhttp://localhost/rootdir/public_html\r\n\r\n> Remember, in your site type only **www.your-domain.com**, everything else php is hidden.\r\n\r\n\r\n## Automatic route controller\r\n\r\nhttp://localhost/rootdir/public_html/`$1`/`$2`/`$3`\r\n\r\n* `$1` : Module - if not informed, use main module (main directory)\r\n* `$2` : Controller - if not informed, instance indexController class\r\n* `$3` : Method - if not informed, call index method\r\n\r\n```php\r\n<?php\r\nnamespace app\\main\\controllers;\r\n\r\nclass ProductController extends \\Lean\\App\r\n{\r\n    public function index() {\r\n        echo 'About Product'\r\n    }\r\n\r\n\tpublic function festures_list() {\r\n\t\techo 'Product list';\r\n\t}\r\n\r\n\tpublic function buy_action() {\r\n\t    echo 'Processing your order...'\r\n\t}\r\n}\r\n```\r\n\r\nTo ProductController example, the result is:\r\n\r\n> uri `/main/product` result is **About Product!**   \r\n> uri `/main/product/index` result is **About Product!**  \r\n> uri `/main/product/features-list` result is **Product list!**  \r\n> uri `/main/product/features_list` result is **Product list!**  \r\n> uri `/main/product/buy` result is **Processing your order...**  \r\n> uri `/main/product/buy-action` result is **Processing your order...**  \r\n> uri `/main/product/buy_action` result is **Processing your order...**  \r\n\r\nTo IndexController example, the result is:\r\n\r\n> uri `/` result is **Hello World!**  \r\n> uri `/main` result is **Hello World!**  \r\n> uri `/main/index` result is **Hello World!**  \r\n> uri `/main/index/index` result is **Hello World!**  \r\n\r\n\r\n## Custom routes\r\n\r\n### Config routes file\r\n\r\nIn `app/Bootstrap.php` add file routes before launch Lean\r\n\r\n```php\r\n...\r\n\r\n/**\r\n * routes file\r\n */\r\nLean\\Route::set_routes_path('app/Routes.php');\r\n\r\n/**\r\n * init lean framework\r\n */\r\nLean\\Launch::instance()->run();\r\n```\r\n\r\n### Basic route\r\n\r\ncreate file `Routes.php` into **app** directory\r\n\r\n```php\r\n<?php\r\nuse Lean\\Route;\r\n\r\nRoute::set('foo/bar', function() {\r\n\techo 'Hi';\r\n});\r\n```\r\n\r\n> Url: http://your-site.com/foo/bar // result is 'Hi'\r\n\r\n### Route to method in controller\r\n\r\n```php\r\n<?php\r\nuse Lean\\Route;\r\n\r\nRoute::set('product', array(\r\n\t'controller' => 'product',\r\n));\r\n\r\nRoute::set('resources', array(\r\n\t'controller' => 'product',\r\n\t'method' => 'resources_list'\r\n));\r\n\r\nRoute::set('learn-more-about-product', array(\r\n\t'controller' => 'product',\r\n\t'method' => 'resources_list'\r\n));\r\n```\r\n\r\n> Url `http://your-site.com/product` result is **About Product**  \r\n> Url `http://your-site.com/resources` result is **Product List**  \r\n> Url `http://your-site.com/learn-more-about-product` result is **Product List**  \r\n\r\n### Route to different module\r\n\r\n```php\r\n<?php\r\nuse Lean\\Route;\r\n\r\nRoute::set('checkout', array(\r\n    'module' => 'api'\r\n\t'controller' => 'payment',\r\n));\r\n```\r\n\r\n### Simple route alias\r\n\r\n```php\r\nRoute::alias('old-page-about-product', 'product');\r\n```\r\n\r\n### Multiple route alias\r\n\r\n```php\r\nRoute::alias(array('old-page-about-product', 'foo', 'bar'), 'product');\r\n```\r\n\r\n## Request object\r\n\r\nRecovery request data in controllers\r\n\r\n```php\r\n<?php\r\nnamespace app\\main\\controllers;\r\n\r\nclass ProductController extends \\Lean\\App\r\n{\r\n\tpublic function index()\r\n\t{\t\t\r\n\t    ...\r\n\t    \r\n\t\t/**\r\n\t\t * get all methods - same of variable $_REQUEST\r\n\t\t */\r\n\t\techo $this->request->name;\r\n\t\techo $this->request->last_name;\r\n\t\t\r\n\t\t/**\r\n\t\t * get only method post - same of variable $_POST\r\n\t\t */\r\n\t\techo $this->request()->post()->name;\r\n\r\n\t\t/**\r\n         * get only method post - same of variable $_POST\r\n         */\r\n\t\techo $this->request()->get()->name;\r\n\r\n\t\t/**\r\n         * get only method file - same of variable $_FILE\r\n         */\t \r\n\t\t $request = $this->request()->file()->name;\t\t\r\n\t\t \r\n\t\t /**\r\n\t\t  * you can too instance request object\r\n\t\t  */\r\n\t\t $request = new \\Lean\\Http\\Request();\r\n\t\t $request->name\r\n\t\t \r\n\t\t ...\r\n\t}\r\n}\r\n```\r\n\r\n## Using Views\r\n\r\nIn views directory, you must create `product` and `layout` subdirectories with `.phtml` files.\r\n\r\n```php\r\n...\r\n    -- controllers\r\n        -- ProductController.php\r\n    -- models\r\n    -- views\r\n        -- product\r\n            -- index.phtml\r\n            -- edit.phtml\r\n        -- layout\r\n            -- header.phtml\r\n            -- footer.phtml\r\n            -- template.html\r\n...\r\n```\r\n\r\nCreate `template.phtml` in layout directory, you can include header and footer parts here\r\n\r\n```html\r\n<html>\r\n<head>\r\n\t<title>My new app</title>\r\n</head>\r\n<body>\r\n\r\n    <!-- include header.phtml from layout directory -->\r\n\t<? $this->app->view->render('layout.header') ?>\r\n\r\n\t<div id=\"container\">\r\n\t\t<!-- include page setted in content variable via ProductController -->\r\n\t\t<? $this->app->view->make('content') ?>\r\n\t</div>\r\n\t\r\n\t<!-- include footer.phtml from layout directory\r\n\t<? $this->app->view->render('layout.footer') ?>\r\n\t\r\n</body>\r\n</html>\r\n```\r\n\r\nRendering yours views\r\n\r\n```php\r\n<?php\r\nnamespace app\\main\\controllers;\r\n\r\nclass ProductController extends \\Lean\\App\r\n{\r\n\tpublic function index()\r\n\t{\t\r\n\t\t/**\r\n\t\t * set which page will rendered by \"content\" variable in \"template.html\"\r\n\t\t * by default, if informed only \"index\" will rendered .phtml file into product directory\r\n\t\t */\r\n\t\t$this->view()->set('content', 'index');\r\n\t\t\r\n\t\t/*\r\n\t\t * render template\r\n\t\t */\r\n\t\t$this->view()->render('layout.template');\r\n\t}\r\n\t\r\n\tpublic function edit()\r\n\t{\t\r\n\t\t/**\r\n\t\t * this example will rendered \"/product/edit.phtml\" file\r\n\t\t */\r\n\t\t$this->view()->set('content', 'edit');\r\n\t\t\r\n\t\t/*\r\n         * render template\r\n         */\r\n\t\t$this->view()->render('layout.template');\r\n\t}\r\n}\r\n```\r\n\r\n## Date\r\n\r\n### Available date formats\r\n\r\n```php\r\nDate::FORMAT_DATE = 'YYYY-mm-dd';\r\nDate::FORMAT_DATE_TIME = 'YYYY-mm-dd HH:MM:SS';\r\nDate::FORMAT_DATE_USER = 'dd/mm/YYYY';\r\nDate::FORMAT_DATE_TIME_USER = 'dd/mm/YYYY HH:MM:SS';\r\nDate::FORMAT_DATE_LONG = 'Sexta-feira, 30 de janeiro de 2015';\r\nDate::FORMAT_DAY = 'dd';\r\nDate::FORMAT_MONTH = 'mm';\r\nDate::FORMAT_YEAR = 'YY';\r\nDate::FORMAT_TIME = 'HH:MM:SS';\r\nDate::FORMAT_TIME_SHORT = 'HH:MM';\r\nDate::FORMAT_DATE_TIME_HASH = 'YYYYmmdd_HHMMSS';\r\n```\r\n\r\n* `YYYY` : Year 4 digits  \r\n* `mm` : Month 2 digits  \r\n* `dd` : Day 2 digits  \r\n* `HH` : Hours 2 digits  \r\n* `MM` : Minutes 2 digits  \r\n* `SS` : Seconds 2 digits  \r\n\r\n### Now\r\n\r\nPrint today date\r\n\r\n```php\r\nuse Lean\\Format\\Date as Date;\r\n\r\necho Date::now() // \"YYYY-mm-dd HH:MM:SS\" \r\necho Date::now(Date::FORMAT_DATE_USER) // \"dd/mm/YYYY\"\r\necho Date::now(Date::FORMAT_TIME) // \"HH:MM:SS\"\r\n```\r\n\r\n### Format date\r\n\r\nFormat using constants date\r\n\r\n```php\r\necho Date:format('2015-01-30 10:59:59', Date::FORMAT_DATE) // 2015-01-30\r\necho Date:format('2015-01-30 10:59:59', Date::FORMAT_DATE_TIME) // 2015-01-30 10:59:59 (nothing change)\r\necho Date:format('2015-01-30 10:59:59', Date::FORMAT_DATE_USER) // 30/01/2015\r\necho Date:format('2015-01-30 10:59:59', Date::FORMAT_DATE_TIME_USER) // 30/01/2015 10:59:59\r\necho Date:format('2015-01-30 10:59:59', Date::FORMAT_TIME_SHORT) // 10:59\r\n```\r\n\r\nFormat to users\r\n\r\n```php\r\necho Date:format_to_human('2015-01-30 10:59:59') // 30/01/30 10:59:59\r\necho Date:format_to_human('2015-01-30') // 30/01/30\r\necho Date:format_to_human('30/01/2015 10:59:59') // 30/01/30 10:59:59 (nothing change)\r\necho Date:format_to_human('30/01/2015') // 30/01/30 (nothing change)\r\necho Date:format_to_human('30/01/2015 10:59:59', Date::FORMAT_DATE_USER) // 30/01/30\r\necho Date:format_to_human('2015-01-30 10:59:59', Date::FORMAT_DATE_USER) // 30/01/30\r\n```\r\n\r\nFormat to datebase\r\n\r\n```php\r\necho Date:format_to_machine('2015-01-30 10:59:59') // 2015-01-30 10:59:59 (nothing change)\r\necho Date:format_to_machine('2015-01-30') // 2015-01-30 (nothing change)\r\necho Date:format_to_machine('30/01/2015 10:59:59') // 2015-01-30 10:59:59\r\necho Date:format_to_machine('30/01/2015') // 2015-01-30\r\necho Date:format_to_machine('30/01/2015 10:59:59', Date::FORMAT_DATE) // 2015-01-30\r\necho Date:format_to_machine('2015-01-30 10:59:59', Date::FORMAT_DATE) // 2015-01-30\r\n```\r\n\r\n### Validating date\r\n\r\nValidate date format\r\n\r\n```php\r\necho Date::validate('01/01/2015'); // true\r\necho Date::validate('01/01/2015 12:10:00'); // true\r\necho Date::validate('2015-01-01'); // true\r\necho Date::validate('2015-01-01 12:10:00'); // true\r\necho Date::validate('201-501-01'); // false\r\necho Date::validate('foo'); // false\r\n```\r\n\r\nValidate especific date user format (00/00/0000 00:00:00)\r\n\r\n```php\r\necho Date::validate_format_human('01/01/2015'); // true\r\necho Date::validate_format_human('01/01/2015 12:10:00'); // true\r\necho Date::validate_format_human('2015-01-01'); // false\r\necho Date::validate_format_human('2015-01-01 12:10:00'); // false\r\necho Date::validate_format_human('201-501-01'); // false\r\necho Date::validate_format_human('foo'); // false\r\n```\r\n\r\nValidate especific date datebase format (0000-00-00 00:00:00)\r\n\r\n```php\r\necho Date::validate_format_machine('01/01/2015'); // false\r\necho Date::validate_format_machine('01/01/2015 12:10:00'); // false\r\necho Date::validate_format_machine('2015-01-01'); // true\r\necho Date::validate_format_machine('2015-01-01 12:10:00'); // true\r\necho Date::validate_format_machine('201-501-01'); // false\r\necho Date::validate_format_machine('foo'); // false\r\n```\r\n\r\n## Time\r\n\r\n### Available time formats\r\n\r\n```php\r\nTime::FORMAT_HOUR_MINUTES = 'HH:MM';\r\nTime::FORMAT_HOUR_MINUTES_SECONDS = 'HH:MM:SS';\r\nTime::FORMAT_HOUR = 'HH';\r\nTime::FORMAT_MINUTES = 'MM';\r\nTime::FORMAT_SECONDS = 'SS';\r\n```\r\n\r\n* `HH` : Hours 2 digits  \r\n* `MM` : Minutes 2 digits  \r\n* `SS` : Seconds 2 digits\r\n\r\n### Now\r\n\r\nPrint time at moment\r\n\r\n```php\r\nuse Lean\\Format\\Time as Time;\r\n\r\necho Time::now() // \"HH:MM:SS\" \r\necho Time::now(Time::FORMAT_HOUR_MINUTES) // \"HH:MM\"\r\necho Time::now(Time::FORMAT_HOUR) // \"HH\"\r\n```\r\n\r\n### Format time\r\n\r\nFormat time default\r\n\r\n```php\r\necho Time::format('12:10') // 12:10:00\r\necho Time::format('122:10') // 122:10:00\r\necho Time::format('12') // 12:00:00\r\necho Time::format('12:60') // 12:59:00\r\necho Time::format('12:99:99') // 12:59:59\r\necho Time::format('1:1') // 01:01:00\r\necho Time::format('5:30') // 05:30:00\r\n```\r\n\r\nFormat using constants time\r\n\r\n```php\r\necho Time::format('12:10', Time::FORMAT_HOUR_MINUTES_SECONDS) // 12:10:00\r\necho Time::format('12:10:5', Time::FORMAT_HOUR_MINUTES_SECONDS) // 12:10:05\r\necho Time::format('12', Time::FORMAT_HOUR_MINUTES_SECONDS) // 12:00:00\r\n\r\necho Time::format('12:10:15', Time::FORMAT_HOUR_MINUTES) // 12:10\r\necho Time::format('12', Time::FORMAT_HOUR_MINUTES) // 12:00\r\necho Time::format('2:10:15', Time::FORMAT_HOUR_MINUTES) // 02:10\r\n```\r\n\r\n### Converter time\r\n\r\nConvert time to seconds\r\n\r\n```php\r\necho Time::time_to_seconds('01:30:00') // 5400\r\necho Time::time_to_seconds('01:15:00') // 4500\r\necho Time::time_to_seconds('00:01:15') // 75\r\necho Time::time_to_seconds('48:00:00') // 172800\r\n```\r\n\r\nConvert seconds to time\r\n\r\n```php\r\necho Time::seconds_to_time('5400') // 01:30:00\r\necho Time::seconds_to_time('4500') // 01:15:00 \r\necho Time::seconds_to_time('75') // 00:01:15\r\necho Time::seconds_to_time('172800') // 48:00:00\r\n```\r\n\r\n### Calculate time\r\n\r\nSum time\r\n\r\n```php\r\necho Time::sum('01:15:00', '02:30:05'); // 03:45:05\r\necho Time::sum('12:30:00', '07:00:00'); // 19:30:00\r\necho Time::sum('12:30:00', '12:00:00'); // 00:30:00\r\n```\r\n\r\nSubtract time\r\n\r\n```php\r\necho Time::subtract('02:30:05', '01:15:00'); // 01:15:05\r\necho Time::subtract('12:30:00', '07:00:00'); // 05:30:00\r\necho Time::subtract('12:30:00', '13:00:00'); // 23:30:00\r\n```\r\n\r\n##Author\r\n\r\nThe Lean PHP framework was created by [Dyorg Almeida](http://facebook.com/dyorg.almeida \"Dyorg Facebook page\"), \r\na full-stack web developer expert and entrepreneur.\r\nDyorg is founder and CEO of [Rabbiit](http://rabbiit.com \"Rabbiit.com\"), \r\na brazilian startup that develops a simple productivity management and time tracking software.    \r\n\r\n## License\r\n\r\nThe Lean PHP framework is released under MIT public license.  \r\nhttp://www.opensource.org/licenses/MIT  \r\nCopyright (c) 2015","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}